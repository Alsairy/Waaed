---
# Waaed Platform - Main CI/CD Pipeline
#
# This is the primary CI/CD workflow for the Waaed unified education platform.
# It orchestrates the entire build, test, security scan, and deployment process
# across multiple environments with advanced features like parallel builds,
# intelligent caching, and comprehensive monitoring.
#
# Key Features:
# - Multi-environment deployments (dev/staging/production)
# - Parallel microservice builds for optimal performance
# - Comprehensive security scanning (SAST, dependency checks, container
# scanning)
# - Intelligent change detection to optimize build times
# - Advanced deployment strategies (rolling, blue-green, canary)
# - Real-time monitoring and alerting integration
# - Automated rollback capabilities
#
# Workflow Triggers:
# - Push to main/develop branches: Triggers full pipeline
# - Pull requests: Runs tests and security scans
# - Manual dispatch: Allows targeted deployments with custom parameters
#
# Environment Strategy:
# - Development: Auto-deploy on 'develop' branch pushes
# - Staging: Auto-deploy on 'main' branch merges
# - Production: Manual approval required with canary deployment
#
name: CI/CD Pipeline

on:
  # Automatic triggers for branch pushes
  push:
    branches: ["main", "develop", "feature/*", "hotfix/*"]

  # Pull request validation
  pull_request:
    branches: ["main", "develop"]

  # Manual deployment trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail (emergency use only)'
        required: false
        default: false
        type: boolean

# Global environment variables used across all jobs
env:
  REGISTRY: ghcr.io                           # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}       # Dynamic image naming
  DOTNET_VERSION: '8.0.x'                   # .NET version for backend services
  NODE_VERSION: '18.x'                      # Node.js version

jobs:
  # ============================================================================
  # CHANGE DETECTION JOB
  # ============================================================================
  # Intelligently detects which parts of the codebase have changed to optimize
  # build times by only running relevant jobs. This significantly reduces
  # CI/CD execution time and resource usage.
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      docs: ${{ steps.changes.outputs.docs }}

    steps:
      # Checkout with full history for accurate change detection
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Use paths-filter to detect changes in specific directories
      - name: 🔍 Detect Changed Paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'src/backend/**'
              - 'tests/**'
              - '*.sln'
              - '**/*.csproj'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            infrastructure:
              - 'helm/**'
              - 'k8s/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'
              - 'scripts/**'
            docs:
              - '**/*.md'
              - 'docs/**'

  build-backend:
    name: Build Backend Services
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == true
    strategy:
      matrix:
        service: [
          'Authentication',
          'TenantManagement',
          'UserManagement',
          'Attendance',
          'LMS',
          'Finance',
          'HR',
          'Library',
          'Analytics',
          'Notifications',
          'Webhooks',
          'Collaboration',
          'FaceRecognition',
          'LeaveManagement',
          'Integrations',
          'WorkflowEngine',
          'ApiGateway'
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore Waaed.sln

      - name: Build ${{ matrix.service }}
        run: |
          if ["${{ matrix.service }}" = "ApiGateway"]; then
            dotnet build \
              src/backend/gateways/Waaed.ApiGateway/Waaed.ApiGateway.csproj \
              --no-restore \
              --configuration Release
          else
            dotnet build \
              src/backend/services/${{ matrix.service }}/\
                Waaed.${{ matrix.service }}.Api/\
                  Waaed.${{ matrix.service }}.Api.csproj \
              --no-restore \
              --configuration Release
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-build
          path: |
            src/backend/services/${{ matrix.service }}/\
              Waaed.${{ matrix.service }}.Api/bin/Release/
            src/backend/gateways/Waaed.ApiGateway/bin/Release/
          retention-days: 1

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: \
            frontend/unified-education-frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend/unified-education-frontend
        run: npm ci

      - name: Lint frontend
        working-directory: frontend/unified-education-frontend
        run: npm run lint

      - name: Build frontend
        working-directory: frontend/unified-education-frontend
        run: npm run build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/unified-education-frontend/dist/
          retention-days: 1

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend]
    if: needs.detect-changes.outputs.backend == true
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore Waaed.sln

      - name: Run unit tests
        run: |
          dotnet test tests/unit/Waaed.Tests.Unit.csproj \
            --no-restore \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./test-results
          flags: unittests
          name: codecov-unit-tests

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend]
    if: needs.detect-changes.outputs.backend == true
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: YourStrong@Passw0rd
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa \
            -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore Waaed.sln

      - name: Run integration tests
        env:
          ConnectionStrings__DefaultConnection: |
            Server=localhost,1433;Database=WaaedTest;User Id=sa;
            Password=YourStrong@Passw0rd;TrustServerCertificate=true;
          ConnectionStrings__Redis: "localhost:6379"
        run: |
          dotnet test tests/integration/Waaed.Tests.Integration.csproj \
            --no-restore \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ./integration-test-results

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results/
          retention-days: 7

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, build-backend, build-frontend]
    if: >
      needs.detect-changes.outputs.backend == true ||
      needs.detect-changes.outputs.frontend == true
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          dotnet add tests/e2e/Waaed.Tests.E2E.csproj \
            package Microsoft.Playwright
          dotnet build tests/e2e/Waaed.Tests.E2E.csproj
          dotnet tool install --global Microsoft.Playwright.CLI --version 1.47.0
          playwright install --with-deps

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: ApiGateway-build
          path: ./artifacts/backend/

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./artifacts/frontend/

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run E2E tests
        run: |
          dotnet test tests/e2e/Waaed.Tests.E2E.csproj \
            --no-restore \
            --configuration Release \
            --logger trx \
            --results-directory ./e2e-test-results

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: e2e-test-results/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/
          retention-days: 7

      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.backend == true ||
      needs.detect-changes.outputs.infrastructure == true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: 'csharp,javascript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security-scan]
    if: >
      always() &&
      (needs.test-unit.result == 'success' ||
       needs.test-unit.result == 'skipped') &&
      (needs.test-integration.result == 'success' ||
       needs.test-integration.result == 'skipped') &&
      (needs.security-scan.result == 'success' ||
       needs.security-scan.result == 'skipped')
    strategy:
      matrix:
        service: [
          'Authentication',
          'Attendance',
          'Analytics',
          'Collaboration',
          'FaceRecognition',
          'Integrations',
          'LeaveManagement',
          'Notifications',
          'Webhooks',
          'WorkflowEngine',
          'apigateway',
          'frontend'
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{
            matrix.service == 'frontend' &&
            'src/frontend/Dockerfile' ||
            matrix.service == 'apigateway' &&
            'src/backend/gateways/Dockerfile' ||
            format('src/backend/services/{0}/Dockerfile', matrix.service)
          }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    if: >
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.waaed.app
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Development
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install waaed-dev ./helm/waaed \
            --namespace waaed-dev \
            --create-namespace \
            --set global.environment=development \
            --set global.imageTag=${{ github.sha }} \
            --set global.registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --values helm/waaed/values-dev.yaml \
            --wait --timeout=10m

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=waaed -n waaed-dev --timeout=300s
          curl -f https://dev.waaed.app/health || exit 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker-images, deploy-development]
    if: >
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.waaed.app
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Staging
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install waaed-staging ./helm/waaed \
            --namespace waaed-staging \
            --create-namespace \
            --set global.environment=staging \
            --set global.imageTag=${{ github.sha }} \
            --set global.registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --values helm/waaed/values-staging.yaml \
            --wait --timeout=15m

      - name: Run integration tests against staging
        run: |
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=waaed -n waaed-staging --timeout=300s
          curl -f https://staging.waaed.app/health || exit 1
          # Run additional staging-specific tests here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker-images, deploy-staging]
    if: >
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://app.waaed.app
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment to Production
        run: |
          export KUBECONFIG=kubeconfig

          # Deploy to green environment
          helm upgrade --install waaed-green ./helm/waaed \
            --namespace waaed-prod \
            --create-namespace \
            --set global.environment=production \
            --set global.imageTag=${{ github.sha }} \
            --set global.registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.deploymentColor=green \
            --values helm/waaed/values-prod.yaml \
            --wait --timeout=20m

          # Wait for green deployment to be ready
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=waaed,deployment-color=green \
            -n waaed-prod --timeout=600s

          # Run production readiness tests
          kubectl port-forward -n waaed-prod svc/waaed-green 8080:80 &
          sleep 10
          curl -f http://localhost:8080/health || exit 1

          # Switch traffic to green (blue-green switch)
          kubectl patch service waaed-prod -n waaed-prod \
            -p '{"spec":{"selector":{"deployment-color":"green"}}}'

          # Wait and verify
          sleep 30
          curl -f https://app.waaed.app/health || exit 1

          # Clean up old blue deployment after successful switch
          helm uninstall waaed-blue -n waaed-prod || true

      - name: Post-deployment verification
        run: |
          # Run production smoke tests
          curl -f https://app.waaed.app/health
          curl -f https://app.waaed.app/api/health

          # Verify all services are responding
          services=("authentication" "lms" "finance" "hr" "library")
          for service in "${services[@]}"; do
            curl -f "https://app.waaed.app/api/$service/health" || \
              echo "Warning: $service health check failed"
          done

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run performance tests
        run: |
          dotnet test tests/performance/Waaed.Tests.Performance.csproj \
            --configuration Release \
            --logger trx \
            --results-directory ./performance-test-results
        env:
          TEST_BASE_URL: https://staging.waaed.app

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: performance-test-results/
          retention-days: 30

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-tests]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Waaed Platform successfully deployed to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Waaed Platform deployment failed. Please check the logs.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
