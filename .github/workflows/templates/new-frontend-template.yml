name: New Frontend CI/CD Template
# This template can be copied and customized for new frontend applications

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    paths:
      - 'frontend/NEW_FRONTEND_NAME/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/NEW_FRONTEND_NAME/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  APP_NAME: NEW_FRONTEND_NAME  # Replace with actual app name
  APP_PATH: frontend/NEW_FRONTEND_NAME  # Replace with actual path
  NODE_VERSION: '18.x'
  PACKAGE_MANAGER: 'npm'  # or 'yarn' or 'pnpm'

jobs:
  # Build and test the frontend application
  build-and-test:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    outputs:
      build-status: ${{ steps.build.outputs.build-status }}
      dist-path: ${{ steps.build.outputs.dist-path }}
      test-results: ${{ steps.build.outputs.test-results }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Use our reusable composite action for building frontend applications
      - name: Build Frontend Application
        id: build
        uses: ./.github/workflows/templates/build-frontend
        with:
          app-name: ${{ env.APP_NAME }}
          app-path: ${{ env.APP_PATH }}
          node-version: ${{ env.NODE_VERSION }}
          package-manager: ${{ env.PACKAGE_MANAGER }}
          build-command: 'build'
          enable-tests: 'true'
          enable-lint: 'true'

  # Security scanning for frontend
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      # Use our reusable composite action for security scanning
      - name: Run Security Scan
        uses: ./.github/workflows/templates/security-scan
        with:
          scan-type: 'dependency'
          project-path: ${{ env.APP_PATH }}
          language: 'javascript'
          severity-threshold: 'medium'
          fail-on-findings: 'true'

  # Build Docker image for frontend
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: success()
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Create Dockerfile for frontend
        run: |
          cat > ${{ env.APP_PATH }}/Dockerfile << 'EOF'
          FROM node:18-alpine as builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          RUN npm run build
          
          FROM nginx:alpine
          COPY --from=builder /app/dist /usr/share/nginx/html
          COPY --from=builder /app/nginx.conf /etc/nginx/nginx.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.APP_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to development environment
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-docker
    if: >
      github.ref == 'refs/heads/develop' ||
      github.event.inputs.environment == 'development'
    environment: development
    
    steps:
      - uses: actions/checkout@v4
      
      # Use our reusable composite action for service deployment
      - name: Deploy Frontend
        uses: ./.github/workflows/templates/deploy-service
        with:
          service-name: ${{ env.APP_NAME }}
          environment: 'development'
          image-tag: ${{ needs.build-docker.outputs.image-tag }}
          deployment-strategy: 'rolling'
          namespace: 'waaed-dev'
          helm-chart-path: './helm/waaed-frontend'
          enable-health-checks: 'true'
          rollback-on-failure: 'true'
          wait-timeout: '300'

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: >
      github.ref == 'refs/heads/main' ||
      github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      # Use our reusable composite action for service deployment
      - name: Deploy Frontend
        uses: ./.github/workflows/templates/deploy-service
        with:
          service-name: ${{ env.APP_NAME }}
          environment: 'staging'
          image-tag: ${{ needs.build-docker.outputs.image-tag }}
          deployment-strategy: 'blue-green'
          namespace: 'waaed-staging'
          helm-chart-path: './helm/waaed-frontend'
          enable-health-checks: 'true'
          rollback-on-failure: 'true'
          wait-timeout: '600'

  # Deploy to production environment (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      # Use our reusable composite action for service deployment
      - name: Deploy Frontend
        uses: ./.github/workflows/templates/deploy-service
        with:
          service-name: ${{ env.APP_NAME }}
          environment: 'production'
          image-tag: ${{ needs.build-docker.outputs.image-tag }}
          deployment-strategy: 'canary'
          namespace: 'waaed-prod'
          helm-chart-path: './helm/waaed-frontend'
          enable-health-checks: 'true'
          rollback-on-failure: 'true'
          wait-timeout: '900'

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - security-scan
      - build-docker
      - deploy-development
      - deploy-staging
      - deploy-production
    if: always()
    
    steps:
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
