name: 'Deploy Service'
description: 'Deploys a microservice to Kubernetes using Helm with advanced deployment strategies'
inputs:
  service-name:
    description: 'Name of the service to deploy'
    required: true
  environment:
    description: 'Target environment (development/staging/production)'
    required: true
  image-tag:
    description: 'Docker image tag to deploy'
    required: true
  deployment-strategy:
    description: 'Deployment strategy (rolling/blue-green/canary)'
    required: false
    default: 'rolling'
  namespace:
    description: 'Kubernetes namespace'
    required: false
    default: 'waaed'
  helm-chart-path:
    description: 'Path to Helm chart'
    required: false
    default: './helm/waaed'
  enable-health-checks:
    description: 'Whether to perform health checks after deployment'
    required: false
    default: 'true'
  rollback-on-failure:
    description: 'Whether to rollback on deployment failure'
    required: false
    default: 'true'
  wait-timeout:
    description: 'Timeout for deployment wait (in seconds)'
    required: false
    default: '600'
outputs:
  deployment-status:
    description: 'Deployment status (success/failure/rollback)'
    value: ${{ steps.deploy.outputs.status }}
  service-url:
    description: 'URL of the deployed service'
    value: ${{ steps.deploy.outputs.service-url }}
  deployment-version:
    description: 'Deployed version/revision'
    value: ${{ steps.deploy.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Setup Kubernetes tools
      shell: bash
      run: |
        echo "Setting up Kubernetes tools..."
        
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Configure Kubernetes context
      shell: bash
      run: |
        echo "Configuring Kubernetes context for ${{ inputs.environment }}..."
        
        case "${{ inputs.environment }}" in
          "development")
            # Configure dev cluster context
            echo "Configuring development cluster"
            ;;
          "staging")
            # Configure staging cluster context
            echo "Configuring staging cluster"
            ;;
          "production")
            # Configure production cluster context
            echo "Configuring production cluster"
            ;;
        esac

    - name: Prepare deployment
      shell: bash
      run: |
        echo "Preparing deployment for ${{ inputs.service-name }}..."
        
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Verify Helm chart
        if [ -d "${{ inputs.helm-chart-path }}" ]; then
          helm lint ${{ inputs.helm-chart-path }}
        else
          echo "Helm chart not found at ${{ inputs.helm-chart-path }}"
          exit 1
        fi

    - name: Deploy service
      id: deploy
      shell: bash
      run: |
        echo "Deploying ${{ inputs.service-name }} using ${{ inputs.deployment-strategy }} strategy..."
        
        # Set deployment values
        release_name="${{ inputs.service-name }}-${{ inputs.environment }}"
        
        case "${{ inputs.deployment-strategy }}" in
          "rolling")
            echo "Executing rolling deployment..."
            helm upgrade --install $release_name ${{ inputs.helm-chart-path }} \
              --namespace ${{ inputs.namespace }} \
              --set image.tag=${{ inputs.image-tag }} \
              --set environment=${{ inputs.environment }} \
              --set service.name=${{ inputs.service-name }} \
              --wait \
              --timeout ${{ inputs.wait-timeout }}s
            ;;
          "blue-green")
            echo "Executing blue-green deployment..."
            # Blue-green deployment logic
            current_color=$(kubectl get deployment ${{ inputs.service-name }} -n ${{ inputs.namespace }} -o jsonpath='{.metadata.labels.color}' 2>/dev/null || echo "blue")
            new_color=$([ "$current_color" = "blue" ] && echo "green" || echo "blue")
            
            helm upgrade --install $release_name-$new_color ${{ inputs.helm-chart-path }} \
              --namespace ${{ inputs.namespace }} \
              --set image.tag=${{ inputs.image-tag }} \
              --set environment=${{ inputs.environment }} \
              --set service.name=${{ inputs.service-name }}-$new_color \
              --set color=$new_color \
              --wait \
              --timeout ${{ inputs.wait-timeout }}s
            ;;
          "canary")
            echo "Executing canary deployment..."
            # Canary deployment logic
            helm upgrade --install $release_name-canary ${{ inputs.helm-chart-path }} \
              --namespace ${{ inputs.namespace }} \
              --set image.tag=${{ inputs.image-tag }} \
              --set environment=${{ inputs.environment }} \
              --set service.name=${{ inputs.service-name }}-canary \
              --set canary.enabled=true \
              --set canary.weight=10 \
              --wait \
              --timeout ${{ inputs.wait-timeout }}s
            ;;
        esac
        
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          
          # Get service URL
          service_url=$(kubectl get service ${{ inputs.service-name }} -n ${{ inputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "internal-service")
          echo "service-url=https://$service_url" >> $GITHUB_OUTPUT
          
          # Get deployment version
          version=$(helm list -n ${{ inputs.namespace }} -f $release_name -o json | jq -r '.[0].revision')
          echo "version=$version" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Health checks
      if: inputs.enable-health-checks == 'true'
      shell: bash
      run: |
        echo "Performing health checks for ${{ inputs.service-name }}..."
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod \
          -l app=${{ inputs.service-name }} \
          -n ${{ inputs.namespace }} \
          --timeout=300s
        
        # Check service health endpoint
        service_url="${{ steps.deploy.outputs.service-url }}"
        if [ "$service_url" != "internal-service" ]; then
          for i in {1..10}; do
            if curl -f "$service_url/health" > /dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Health check attempt $i/10 failed, retrying..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Health checks failed after 10 attempts"
              exit 1
            fi
          done
        fi

    - name: Rollback on failure
      if: failure() && inputs.rollback-on-failure == 'true'
      shell: bash
      run: |
        echo "🔄 Rolling back deployment due to failure..."
        
        release_name="${{ inputs.service-name }}-${{ inputs.environment }}"
        
        # Get previous revision
        previous_revision=$(helm history $release_name -n ${{ inputs.namespace }} --max 2 -o json | jq -r '.[1].revision // empty')
        
        if [ -n "$previous_revision" ]; then
          helm rollback $release_name $previous_revision -n ${{ inputs.namespace }}
          echo "status=rollback" >> $GITHUB_OUTPUT
          echo "✅ Rollback completed to revision $previous_revision"
        else
          echo "❌ No previous revision found for rollback"
        fi

    - name: Generate deployment summary
      shell: bash
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service:** ${{ inputs.service-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy:** ${{ inputs.deployment-strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag:** ${{ inputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ steps.deploy.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service URL:** ${{ steps.deploy.outputs.service-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.deploy.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
