---
name: Deploy to Staging

true:
  push:
    branches: [main, release/*]
  workflow_dispatch:
    inputs:
      force_deploy:
        descriptitrue: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean
      deployment_strategy:
        descriptitrue: 'Deployment strategy'
        required: false
        default: 'blue-green'
        type: choice
        options:
          - rolling
          - blue-green
          - canary
      run_load_tests:
        descriptitrue: 'Run load tests after deployment'
        required: false
        default: 'true'
        type: boolean

env:
  ENVIRONMENT: staging
  NAMESPACE: waaed-staging
  HELM_CHART_PATH: ./helm/hudur
  DOCKER_REGISTRY: ghcr.io
  IMAGE_TAG: staging-${{ github.sha }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      helm: ${{ steps.changes.outputs.helm }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'src/backend/**'
              - 'docker-compose.yml'
              - 'docker-compose.production.yml'
            frontend:
              - 'frontend/**'
            helm:
              - 'helm/**'
            docker:
              - '**/Dockerfile'
              - 'docker-compose*.yml'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [detect-changes, security-scan]
    if: >
      always() &&
      (success() || github.event.inputs.force_deploy == 'true') &&
      (needs.detect-changes.outputs.backend == 'true' ||
       needs.detect-changes.outputs.frontend == 'true')

    strategy:
      matrix:
        service: [authentication, attendance, lms, finance, hr, library,
                 inventory, polls, blogs, tasks]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-versitrue: '18'
          cache: 'npm'
          cache-dependency-path: frontend/unified-education-frontend/package-lock.json

      - name: Restore backend dependencies
        run: |
          dotnet restore src/backend/services/${{ matrix.service }}/*/
          dotnet restore src/backend/gateways/Waaed.ApiGateway/

      - name: Build backend services
        run: |
          dotnet build src/backend/services/${{ matrix.service }}/*/ --no-restore --configuration Release
          dotnet build src/backend/gateways/Waaed.ApiGateway/ --no-restore --configuration Release

      - name: Install frontend dependencies
        if: needs.detect-changes.outputs.frontend == 'true'
        working-directory: frontend/unified-education-frontend
        run: npm ci

      - name: Build frontend
        if: needs.detect-changes.outputs.frontend == 'true'
        working-directory: frontend/unified-education-frontend
        run: npm run build

      - name: Run comprehensive tests
        run: |
          dotnet test tests/unit/ --no-build --verbosity normal --configuration Release
          dotnet test tests/integration/ --no-build --verbosity normal --configuration Release
          dotnet test src/backend/services/${{ matrix.service }}/*/ --no-build --verbosity normal --configuration Release

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: >
      always() &&
      (success() || github.event.inputs.force_deploy == 'true') &&
      needs.detect-changes.outputs.docker == 'true'

    strategy:
      matrix:
        service: [authentication, attendance, lms, finance, hr, library,
                 inventory, polls, blogs, tasks, api-gateway, frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/backend/services/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/waaed-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/waaed-${{ matrix.service }}:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Sign container images
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

      - name: Sign the published Docker image
        run: |
          cosign sign --yes ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/waaed-${{ matrix.service }}:${{ env.IMAGE_TAG }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test, build-docker-images]
    if: >
      always() &&
      (success() || github.event.inputs.force_deploy == 'true') &&
      (needs.detect-changes.outputs.backend == 'true' ||
       needs.detect-changes.outputs.frontend == 'true' ||
       needs.detect-changes.outputs.helm == 'true')

    environment:
      name: staging
      url: https://staging.waaed.platform.com

    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: '1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name waaed-staging-cluster

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Rolling Update
        if: github.event.inputs.deployment_strategy == 'rolling'
        run: |
          helm upgrade --install waaed-staging ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --set environment=staging \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set ingress.host=staging.waaed.platform.com \
            --set replicaCount=3 \
            --set resources.requests.cpu=500m \
            --set resources.requests.memory=1Gi \
            --set resources.limits.cpu=1000m \
            --set resources.limits.memory=2Gi \
            --set database.host=${{ secrets.STAGING_DB_HOST }} \
            --set database.password=${{ secrets.STAGING_DB_PASSWORD }} \
            --set redis.host=${{ secrets.STAGING_REDIS_HOST }} \
            --set redis.password=${{ secrets.STAGING_REDIS_PASSWORD }} \
            --wait --timeout=15m

      - name: Deploy with Blue-Green Strategy (Default)
        if: github.event.inputs.deployment_strategy != 'rolling' && github.event.inputs.deployment_strategy != 'canary'
        run: |
          # Get current deployment color
          CURRENT_COLOR=$(kubectl get deployment waaed-staging -n ${{ env.NAMESPACE }} -o jsonpath='{.metadata.labels.color}' 2>/dev/null || echo "blue")
          NEW_COLOR=$(["$CURRENT_COLOR" = "blue"] && echo "green" || echo "blue")

          echo "Current color: $CURRENT_COLOR, New color: $NEW_COLOR"

          # Deploy new version with new color
          helm upgrade --install waaed-staging-$NEW_COLOR ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --set environment=staging \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set ingress.host=staging.waaed.platform.com \
            --set nameOverride=waaed-staging-$NEW_COLOR \
            --set deployment.color=$NEW_COLOR \
            --set replicaCount=3 \
            --set resources.requests.cpu=500m \
            --set resources.requests.memory=1Gi \
            --set resources.limits.cpu=1000m \
            --set resources.limits.memory=2Gi \
            --set database.host=${{ secrets.STAGING_DB_HOST }} \
            --set database.password=${{ secrets.STAGING_DB_PASSWORD }} \
            --set redis.host=${{ secrets.STAGING_REDIS_HOST }} \
            --set redis.password=${{ secrets.STAGING_REDIS_PASSWORD }} \
            --wait --timeout=15m

          # Health check with retries
          for i in {1..10}; do
            if kubectl wait --for=condition=available --timeout=60s deployment/waaed-staging-$NEW_COLOR -n ${{ env.NAMESPACE }}; then
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 30
          done

          # Advanced health checks
          kubectl get pods -n ${{ env.NAMESPACE }} -l color=$NEW_COLOR

          # Test new deployment
          NEW_SERVICE_IP=$(kubectl get service waaed-staging-$NEW_COLOR -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [-n "$NEW_SERVICE_IP"]; then
            curl -f "http://$NEW_SERVICE_IP/health" || exit 1
          fi

          # Switch traffic
          kubectl patch service waaed-staging -n ${{ env.NAMESPACE }} -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}'

          # Wait for traffic switch validation
          sleep 60

          # Final validation
          curl -f "https://staging.waaed.platform.com/health" || exit 1

          # Cleanup old deployment
          helm uninstall waaed-staging-$CURRENT_COLOR -n ${{ env.NAMESPACE }} || true

      - name: Deploy with Canary Strategy
        if: github.event.inputs.deployment_strategy == 'canary'
        run: |
          # Deploy canary version (5% traffic)
          helm upgrade --install waaed-staging-canary ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --set environment=staging \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set ingress.host=staging.waaed.platform.com \
            --set nameOverride=waaed-staging-canary \
            --set deployment.canary=true \
            --set deployment.canaryWeight=5 \
            --set replicaCount=1 \
            --set resources.requests.cpu=500m \
            --set resources.requests.memory=1Gi \
            --set resources.limits.cpu=1000m \
            --set resources.limits.memory=2Gi \
            --set database.host=${{ secrets.STAGING_DB_HOST }} \
            --set database.password=${{ secrets.STAGING_DB_PASSWORD }} \
            --set redis.host=${{ secrets.STAGING_REDIS_HOST }} \
            --set redis.password=${{ secrets.STAGING_REDIS_PASSWORD }} \
            --wait --timeout=15m

          # Wait for canary validation (10 minutes)
          echo "Canary deployed with 5% traffic. Monitoring for 10 minutes..."
          sleep 600

          # Check canary metrics and health
          kubectl get pods -n ${{ env.NAMESPACE }} -l canary=true

          # Promote canary to 25%
          helm upgrade waaed-staging-canary ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --reuse-values \
            --set deployment.canaryWeight=25 \
            --set replicaCount=2

          sleep 600

          # Promote canary to 50%
          helm upgrade waaed-staging-canary ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --reuse-values \
            --set deployment.canaryWeight=50 \
            --set replicaCount=3

          sleep 600

          # Full promotion
          helm upgrade waaed-staging-canary ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --reuse-values \
            --set deployment.canaryWeight=100 \
            --set replicaCount=5

          # Cleanup and promote
          helm uninstall waaed-staging -n ${{ env.NAMESPACE }} || true
          helm upgrade --install waaed-staging ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --reuse-values
          helm uninstall waaed-staging-canary -n ${{ env.NAMESPACE }}

  run-integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run integration tests against staging
        env:
          TEST_BASE_URL: https://staging.waaed.platform.com
          TEST_API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: |
          dotnet test tests/integration/ --verbosity normal \
            --logger "trx;LogFileName=integration-test-results.trx" \
            --collect:"XPlat Code Coverage"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/*.xml

  run-load-tests:
    name: Run Load Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, run-integration-tests]
    if: >
      success() &&
      (github.event.inputs.run_load_tests == 'true' || github.event.inputs.run_load_tests == '')

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run load tests
        env:
          TEST_BASE_URL: https://staging.waaed.platform.com
          LOAD_TEST_DURATION: 300
          LOAD_TEST_USERS: 100
        run: |
          dotnet test tests/performance/ --verbosity normal \
            --logger "trx;LogFileName=load-test-results.trx"

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: |
            **/TestResults/**/*.trx
            **/performance-results/**

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, run-integration-tests, run-load-tests]
    if: always()

    steps:
      - name: Notify success
        if: >
          needs.deploy-staging.result == 'success' &&
          needs.run-integration-tests.result == 'success' &&
          (needs.run-load-tests.result == 'success' || needs.run-load-tests.result == 'skipped')
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Staging deployment successful!
            Environment: Staging
            Strategy: ${{ github.event.inputs.deployment_strategy || 'blue-green' }}
            URL: https://staging.waaed.platform.com
            Integration Tests: ✅ Passed
            Load Tests: ${{ needs.run-load-tests.result == 'success' && '✅ Passed' || '⏭️ Skipped' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: >
          needs.deploy-staging.result == 'failure' ||
          needs.run-integration-tests.result == 'failure' ||
          needs.run-load-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Staging deployment or testing failed!
            Environment: Staging
            Strategy: ${{ github.event.inputs.deployment_strategy || 'blue-green' }}
            Deployment: ${{ needs.deploy-staging.result }}
            Integration Tests: ${{ needs.run-integration-tests.result }}
            Load Tests: ${{ needs.run-load-tests.result }}
            Please check the logs for details.
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
