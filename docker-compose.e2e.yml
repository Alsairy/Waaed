version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "${SQL_SERVER_PASSWORD:-TestPassword123}"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
      MSSQL_MEMORY_LIMIT_MB: 4096
      MSSQL_COLLATION: "SQL_Latin1_General_CP1_CI_AS"
      MSSQL_ENABLE_HADR: 0
      MSSQL_AGENT_ENABLED: false
      MSSQL_TCP_PORT: 1433
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${SQL_SERVER_PASSWORD:-TestPassword123}' -C -Q 'SELECT 1' -l 60 -t 120"]
      interval: 30s
      timeout: 60s
      retries: 60
      start_period: 300s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped
    volumes:
      - sqlserver_data:/var/opt/mssql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped
    volumes:
      - redis_data:/data

  api-gateway:
    build:
      context: .
      dockerfile: src/backend/gateways/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=WaaedTest;User Id=sa;Password=${SQL_SERVER_PASSWORD:-TestPassword123};TrustServerCertificate=true;Connection Timeout=120;Command Timeout=600;
      - ConnectionStrings__Redis=redis:6379
      - ENABLE_RABBITMQ_HEALTH_CHECK=false
      - ENABLE_REDIS_HEALTH_CHECK=true
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_SHUTDOWNTIMEOUTSECONDS=30
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health --connect-timeout 15 --max-time 30 || exit 1"]
      interval: 20s
      timeout: 30s
      retries: 30
      start_period: 240s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: waaed-e2e-network
    driver: bridge
