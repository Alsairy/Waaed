// <auto-generated />
using System;
using Waaed.LMS.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Waaed.LMS.Api.Migrations
{
    [DbContext(typeof(LMSDbContext))]
    [Migration("20250627094519_InitialLMSMigration")]
    partial class InitialLMSMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DelayedPostAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireInitialPost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.AnnouncementComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementComments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowLateSubmissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllowedFileTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GradingType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GroupAssignment")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("GroupSetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LatePenaltyPercent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeerReviewCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PeerReviewDueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PeerReviewEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RubricId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RubricId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttendeePassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JoinUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeetingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModeratorPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModeratorUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MuteOnStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RecordingEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordingUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurrencePattern")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireModeratorApproval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ConferenceParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("ConferenceParticipants");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ConferenceRecording", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlaybackUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("ConferenceRecordings");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SyllabusContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseEnrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanParticipateDiscussions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanSubmitAssignments")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanViewGrades")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UnlockAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseStructure")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CourseTemplates");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AllowRating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnnouncement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OnlyGradersCanRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireInitialPost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SortByRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.DiscussionPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParentPostId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParentPostId");

                    b.ToTable("DiscussionPosts");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ExcusedFromGrading")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GradedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LetterGrade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PercentageScore")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SubmissionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LTILaunch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LTIToolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LaunchUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LaunchedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceLinkId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultSourcedId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Score")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LTIToolId");

                    b.ToTable("LTILaunches");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LTITool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthLoginUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthTokenUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumerKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomFields")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeploymentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeysetUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LaunchUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Placements")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SharedSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetLinkUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LTITools");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LearningOutcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MasteryScale")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MasteryThreshold")
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LearningOutcomes");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ModuleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleItems");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.OutcomeAlignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LearningOutcomeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LearningOutcomeId1")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("LearningOutcomeId");

                    b.HasIndex("LearningOutcomeId1");

                    b.HasIndex("QuizId");

                    b.ToTable("OutcomeAlignments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.OutcomeResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAssessed")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LearningOutcomeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MasteryLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Score")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LearningOutcomeId");

                    b.ToTable("OutcomeResults");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.PostRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostRatings");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerChoices")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LearningOutcomeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LearningOutcomeId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.QuestionResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizAttemptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AllowedAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CantGoBack")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OneQuestionAtATime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireLockdownBrowser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScoringPolicy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCorrectAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShowCorrectAnswersAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShuffleAnswers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShuffleQuestions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.QuizAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("QuizId1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Score")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("QuizId1");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Rubric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rubrics");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RubricCriterionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("RubricCriterionId");

                    b.ToTable("RubricAssessments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricCriterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LearningOutcomeId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RubricId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LearningOutcomeId");

                    b.HasIndex("RubricId");

                    b.ToTable("RubricCriteria");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Points")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RubricCriterionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RubricCriterionId");

                    b.ToTable("RubricLevels");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompletionStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SCORMPackageId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Score")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuccessStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SuspendData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SCORMPackageId");

                    b.ToTable("SCORMAttempts");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrectResponse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InteractionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Latency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SCORMAttemptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentResponse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Weighting")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SCORMAttemptId");

                    b.ToTable("SCORMInteractions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AvailableUntil")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManifestPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("SCORMPackages");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkflowState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SubmissionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionComments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.TemplateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TemplateModuleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TemplateModuleId");

                    b.ToTable("TemplateItems");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.TemplateModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseTemplateId");

                    b.ToTable("TemplateModules");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Announcement", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Announcements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.AnnouncementComment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Announcement", "Announcement")
                        .WithMany("Comments")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Assignment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.Rubric", "Rubric")
                        .WithMany("Assignments")
                        .HasForeignKey("RubricId");

                    b.Navigation("Course");

                    b.Navigation("Rubric");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Conference", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ConferenceParticipant", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Conference", "Conference")
                        .WithMany("Participants")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ConferenceRecording", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Conference", "Conference")
                        .WithMany("Recordings")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Course", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.CourseTemplate", "Template")
                        .WithMany("Courses")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseModule", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Discussion", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Discussions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.DiscussionPost", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Discussion", "Discussion")
                        .WithMany("Posts")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.DiscussionPost", "ParentPost")
                        .WithMany("Replies")
                        .HasForeignKey("ParentPostId");

                    b.Navigation("Discussion");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Grade", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.Submission", "Submission")
                        .WithOne("Grade")
                        .HasForeignKey("Waaed.LMS.Api.Entities.Grade", "SubmissionId");

                    b.Navigation("Assignment");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LTILaunch", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.LTITool", "LTITool")
                        .WithMany("Launches")
                        .HasForeignKey("LTIToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LTITool");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.ModuleItem", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.CourseModule", "Module")
                        .WithMany("Items")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.OutcomeAlignment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Assignment", null)
                        .WithMany("OutcomeAlignments")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Waaed.LMS.Api.Entities.LearningOutcome", "LearningOutcome")
                        .WithMany()
                        .HasForeignKey("LearningOutcomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.LearningOutcome", null)
                        .WithMany("Alignments")
                        .HasForeignKey("LearningOutcomeId1");

                    b.HasOne("Waaed.LMS.Api.Entities.Quiz", null)
                        .WithMany("OutcomeAlignments")
                        .HasForeignKey("QuizId");

                    b.Navigation("LearningOutcome");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.OutcomeResult", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.LearningOutcome", "LearningOutcome")
                        .WithMany("Results")
                        .HasForeignKey("LearningOutcomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningOutcome");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.PostRating", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.DiscussionPost", "Post")
                        .WithMany("Ratings")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Question", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.LearningOutcome", "LearningOutcome")
                        .WithMany()
                        .HasForeignKey("LearningOutcomeId");

                    b.HasOne("Waaed.LMS.Api.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningOutcome");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.QuestionResponse", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.QuizAttempt", "QuizAttempt")
                        .WithMany("Responses")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Quiz", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.QuizAttempt", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.Quiz", null)
                        .WithMany("Attempts")
                        .HasForeignKey("QuizId1");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricAssessment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Grade", "Grade")
                        .WithMany("RubricAssessments")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Waaed.LMS.Api.Entities.RubricCriterion", "RubricCriterion")
                        .WithMany("Assessments")
                        .HasForeignKey("RubricCriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("RubricCriterion");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricCriterion", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.LearningOutcome", "LearningOutcome")
                        .WithMany("RubricCriteria")
                        .HasForeignKey("LearningOutcomeId");

                    b.HasOne("Waaed.LMS.Api.Entities.Rubric", "Rubric")
                        .WithMany("Criteria")
                        .HasForeignKey("RubricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningOutcome");

                    b.Navigation("Rubric");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricLevel", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.RubricCriterion", "RubricCriterion")
                        .WithMany("Levels")
                        .HasForeignKey("RubricCriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RubricCriterion");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMAttempt", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.SCORMPackage", "SCORMPackage")
                        .WithMany("Attempts")
                        .HasForeignKey("SCORMPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SCORMPackage");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMInteraction", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.SCORMAttempt", "SCORMAttempt")
                        .WithMany("Interactions")
                        .HasForeignKey("SCORMAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SCORMAttempt");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMPackage", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Submission", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SubmissionComment", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.Submission", "Submission")
                        .WithMany("Comments")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.TemplateItem", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.TemplateModule", "TemplateModule")
                        .WithMany("Items")
                        .HasForeignKey("TemplateModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateModule");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.TemplateModule", b =>
                {
                    b.HasOne("Waaed.LMS.Api.Entities.CourseTemplate", "CourseTemplate")
                        .WithMany("Modules")
                        .HasForeignKey("CourseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTemplate");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Announcement", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Assignment", b =>
                {
                    b.Navigation("OutcomeAlignments");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Conference", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Course", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Assignments");

                    b.Navigation("Discussions");

                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseModule", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.CourseTemplate", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Discussion", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.DiscussionPost", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Grade", b =>
                {
                    b.Navigation("RubricAssessments");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LTITool", b =>
                {
                    b.Navigation("Launches");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.LearningOutcome", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("Results");

                    b.Navigation("RubricCriteria");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Question", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Quiz", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("OutcomeAlignments");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.QuizAttempt", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Rubric", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.RubricCriterion", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMAttempt", b =>
                {
                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.SCORMPackage", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.Submission", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Waaed.LMS.Api.Entities.TemplateModule", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
