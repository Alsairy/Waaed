// <auto-generated />
using System;
using AttendancePlatform.Inventory.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttendancePlatform.Inventory.Api.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250627151337_InitialInventoryMigration")]
    partial class InitialInventoryMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.GoodsReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryNote")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GRNDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GRNNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("InspectedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsQualityApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("QualityApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GRNNumber")
                        .IsUnique();

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("GoodsReceipts");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.GoodsReceiptItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AcceptedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GoodsReceiptId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseOrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualityNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceivedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RejectedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumbers")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceiptId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderItemId");

                    b.ToTable("GoodsReceiptItems", t =>
                        {
                            t.HasCheckConstraint("CK_GoodsReceiptItem_Quantities", "ReceivedQuantity >= 0 AND AcceptedQuantity >= 0 AND RejectedQuantity >= 0 AND AcceptedQuantity + RejectedQuantity <= ReceivedQuantity");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Indent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IndentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IndentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextRecurrenceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("RecurrencePattern")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalEstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndentNumber")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Indents");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.IndentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EstimatedTotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedUnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("IndentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IssuedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specifications")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndentId");

                    b.HasIndex("ItemId");

                    b.ToTable("IndentItems", t =>
                        {
                            t.HasCheckConstraint("CK_IndentItem_Quantities", "RequestedQuantity > 0 AND (ApprovedQuantity IS NULL OR ApprovedQuantity >= 0) AND IssuedQuantity >= 0");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IndentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IssueNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IssuedTo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresReturn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReturnNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransferToStoreId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndentId");

                    b.HasIndex("IssueNumber")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.HasIndex("TransferToStoreId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.IssueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IndentItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssuedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReturnedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumbers")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndentItemId");

                    b.HasIndex("IssueId");

                    b.HasIndex("ItemId");

                    b.ToTable("IssueItems", t =>
                        {
                            t.HasCheckConstraint("CK_IssueItem_Quantities", "IssuedQuantity > 0 AND (ReturnedQuantity IS NULL OR ReturnedQuantity >= 0) AND (ReturnedQuantity IS NULL OR ReturnedQuantity <= IssuedQuantity)");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaximumStock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreferredSupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReorderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specifications")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemCode")
                        .IsUnique();

                    b.HasIndex("PreferredSupplierId");

                    b.HasIndex("StoreId");

                    b.ToTable("Items", t =>
                        {
                            t.HasCheckConstraint("CK_Item_StockLevels", "MinimumStock >= 0 AND MaximumStock >= MinimumStock AND ReorderLevel >= 0 AND ReorderQuantity >= 0");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PODate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Terms")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PONumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceivedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specifications")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems", t =>
                        {
                            t.HasCheckConstraint("CK_PurchaseOrderItem_Quantities", "OrderedQuantity > 0 AND ReceivedQuantity >= 0 AND UnitPrice >= 0");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.StockAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdjustedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AdjustedStock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdjustmentDirection")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AdjustmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("AdjustmentQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceDocument")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalCostImpact")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentNumber")
                        .IsUnique();

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockAdjustments", t =>
                        {
                            t.HasCheckConstraint("CK_StockAdjustment_Quantities", "CurrentStock >= 0 AND AdjustedStock >= 0 AND AdjustmentQuantity > 0");
                        });
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentStoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentStoreId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.GoodsReceipt", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("GoodsReceipts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.GoodsReceiptItem", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany("GoodsReceiptItems")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Item", "Item")
                        .WithMany("GoodsReceiptItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.PurchaseOrderItem", "PurchaseOrderItem")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GoodsReceipt");

                    b.Navigation("Item");

                    b.Navigation("PurchaseOrderItem");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Indent", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "Store")
                        .WithMany("Indents")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.IndentItem", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Indent", "Indent")
                        .WithMany("IndentItems")
                        .HasForeignKey("IndentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Item", "Item")
                        .WithMany("IndentItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Indent");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Issue", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Indent", "Indent")
                        .WithMany()
                        .HasForeignKey("IndentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "Store")
                        .WithMany("Issues")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "TransferToStore")
                        .WithMany()
                        .HasForeignKey("TransferToStoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Indent");

                    b.Navigation("Store");

                    b.Navigation("TransferToStore");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.IssueItem", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.IndentItem", "IndentItem")
                        .WithMany()
                        .HasForeignKey("IndentItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Issue", "Issue")
                        .WithMany("IssueItems")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Item", "Item")
                        .WithMany("IssueItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IndentItem");

                    b.Navigation("Issue");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Item", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Supplier", "PreferredSupplier")
                        .WithMany("PreferredItems")
                        .HasForeignKey("PreferredSupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "Store")
                        .WithMany("Items")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreferredSupplier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Item", "Item")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.StockAdjustment", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Item", "Item")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "Store")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Store", b =>
                {
                    b.HasOne("AttendancePlatform.Inventory.Api.Entities.Store", "ParentStore")
                        .WithMany("ChildStores")
                        .HasForeignKey("ParentStoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentStore");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.GoodsReceipt", b =>
                {
                    b.Navigation("GoodsReceiptItems");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Indent", b =>
                {
                    b.Navigation("IndentItems");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Issue", b =>
                {
                    b.Navigation("IssueItems");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Item", b =>
                {
                    b.Navigation("GoodsReceiptItems");

                    b.Navigation("IndentItems");

                    b.Navigation("IssueItems");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockAdjustments");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("GoodsReceipts");

                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Store", b =>
                {
                    b.Navigation("ChildStores");

                    b.Navigation("Indents");

                    b.Navigation("Issues");

                    b.Navigation("Items");

                    b.Navigation("StockAdjustments");
                });

            modelBuilder.Entity("AttendancePlatform.Inventory.Api.Entities.Supplier", b =>
                {
                    b.Navigation("PreferredItems");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
